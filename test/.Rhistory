#round:
bigger_change <- round(bigger_change, digits = 1)
compare <- round(compare, digits = 1)
smaller_change <- round(smaller_change, digits = 1)
#return sentence:
paste0(
"The country with the bigger change in life expectancy was ",
bigger, "(gain=", bigger_change, "), whose life expectancy grew by ",
compare, " years more than ", smaller, "'s (gain=", smaller_change, ")."
)
} else {
#return sentence:
"Both countries have the same life expectancy."
}
}
# Using your `bigger_change()` function,(you mean compare_change() right????) create a
# variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
usa_or_france <- compare_change("United States", "France", life_exp)
# Write your `life_exp` data.frame to a new .csv file to your
# data/ directory with the filename `life_exp_with_change.csv`.
# Make sure not to write row names.
# Write your `life_exp` data.frame to a new .csv file to your
# data/ directory with the filename `life_exp_with_change.csv`.
# Make sure not to write row names.
write.csv(life_exp, file = "data/life_exp_with_change.csv", row.names = FALSE)
# A2 foundational skills
# Set up and Defining variables ------------------------------------------------
# Load the the `stringr` package
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "Leqi"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
hour_per_day <- 24
min_per_hour <- 60
minutes_in_a_day <- hour_per_day * min_per_hour
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
day_per_year <- 365
hours_in_a_year <- day_per_year * hour_per_day
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# "Hello, my name is {name}, and I'm {age} years old."
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should have a space after a comma)
make_introduction <- function(name, age) {
paste0("Hello, my name is ", name, ", and I'm ", age, " years old.")
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
casual_intro <- paste(my_intro) #copy by value
str_sub(casual_intro, 1, 17) <- "Hey, I'm "
movies <- c("Harry Potter",
"Star Trek",
"The Lord of the Rings",
"The Social Network",
"Iron Man",
"Star War")
indicies <- c(1, 3, 4)
top_three <- movies[indicies]
indicies <- c(1, 2, 3)
top_three <- movies[indicies]
excited <- paste(top_three, " is a great movie!")
summarize_vector <- function(num) {
list(
mean(num),
median(num),
length(num)
)
}
# a3-using-data
# Before you get started, set your working directory using the Session menu
###################### Data Frame Manipulation (24 POINTS) #####################
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
students <- paste("Students ", 1:1000)
# Create a vector `math_grades` that holds 1000 random values in it
# (these represent grades in a math course)
# These values should be normally distributed with a mean of 88 and a
# standard deviation of 10
math_grades <- c(1:1000)
math_grades <- rnorm(math_grades, mean = 88, sd = 10)
# Replace any values in the `math_grades vector` that are above 100 with
# the number 100
math_grades[math_grades > 100] <- 100
# Create a vector `spanish_grades` that holds 1000 random values in it
# (these represent grades in a spanish course)
# These values should be normally distributed with a mean of 85 and a
# standard deviation of 12
spanish_grades <- rnorm(c(1:1000), mean = 85, sd = 12)
# Replace any values in the `spanish_grades` that are above 100 with
# the number 100
spanish_grades[spanish_grades > 100] <- 100
# Create a data.frame variable `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(students, math_grades, spanish_grades, stringsAsFactors = FALSE)
# Create a variable `num_students` that contains the
# number of rows in your dataframe `grades`
num_students <- nrow(grades)
# Create a variable `num_courses` that contains the number of columns
# in your dataframe `grades` minus one (b/c of their names)
num_courses <- ncol(grades) - 1
# Add a new column `grade_diff` to your dataframe, which is equal to
# `students$math_grades` minus `students$spanish_grades`
grade_diff <- grades$math_grades - grades$spanish_grades
grades[,"grade_diff"] <- grade_diff
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that
# indicates that a student got a better grade in math
better_at_math <- (grade_diff > 0)
grades[,"better_at_math"] <- better_at_math
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- length(better_at_math[better_at_math == TRUE])
# Write your `grades` dataframe to a new .csv file inside your data/ directory
# with the filename `grades.csv`. Make sure *not* to write row names.
# (you'll need to create the `data/` directory, which you can do outside of R)
write.csv(grades, file = "data/grades.csv", row.names = FALSE)
########################### Built in R Data (28 points) ########################
# In this section, you'll work with the `Titanic` data set
# Which is built into the R environment.
# This data set actually loads in a format called a *table*
# See https://cran.r-project.org/web/packages/data.table/data.table.pdf
# Use the `is.data.frame()` function to test if it is a table.
is.data.frame(Titanic)
# Create a variable `titanic_df` by converting `Titanic` into a data frame;
# you can use the `data.frame()` function or `as.data.frame()`
# Be sure to **not** treat strings as factors!
titanic_df <- as.data.frame(Titanic, stringsAsFactors = FALSE)
# It's important to understand the _meaning_ of each column before analyzing it
# Using comments below, describe what information is stored in each column
# For categorical variables, list all possible values
# Class: 1st, 2nd, 3rd, Crew
# Sex: Male, Female
# Age: Adult, Child
# Survived: No, Yes
# Freq:0 1 3 4 5 11 13 14 17 20 35 57 75 76 80 89 118 140 154 192 387 670
# Create a variable `children` that are the *only* the rows of the data frame
# with information about the number children on the Titanic.
children <- titanic_df[titanic_df$Age == "Child",]
# Create a variable `num_children` that is the total number of children.
# Hint: remember the `sum()` function!
num_children <- nrow(children)
# Create a variable `most_lost` which has the *row* with the
# largest absolute number of losses (people who did not survive).
# Tip: if you want, you can use multiple statements (lines of code)
# if you find that helpful to create this variable.
#most_lost <- titanic_df[which.max(titanic_df$Freq),]
max <- max(titanic_df$Freq)
most_lost <- titanic_df[titanic_df$Freq == max,]
# Define a function called `survival_rate()` that takes in two arguments:
# - a ticket class (e.g., "1st", "2nd"), and
# - the dataframe itself (it's good practice to explicitly pass in data frames)
# This function should return the following
# sentence that states the *survival rate* (# survived / # in group)
# of adult men and "women and children" in that ticketing class.
# It should read (for example):
# Of Crew class, 87% of women and children survived and 22% of men survived.
# The approach you take to generating the sentence to return is up to you.
# A good solution will likely utilize filtering to produce the required data.
# You must round values and present them as percentages in the sentence.
survival_rate <- function(c_name, df) {
#total_member
member <- df[df$Class == c_name,]
total_member <- sum(member$Freq)
#adult men:
num_men <- sum(member[member$Sex == "Male" & member$Age == "Adult", "Freq"])
#women and children:
num_women_chidren <- total_member - num_men
#%men survived:
percent_men <- round(num_men / total_member, digit = 2) * 100
#%women&children survived:
percent_women_children <- round(num_women_chidren / total_member, digits = 2) * 100
#return sentence:
paste0("Of ", c_name, " class, ",
percent_women_children, "% of women and children survived and ",
percent_men, "% of men survived.")
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class and the `titanic_df` data frame
# to your `survival_rate` function
# (`Crew`, `1st`, `2nd`, and `3rd`), passing int
first_survived <- survival_rate("1st", titanic_df)
second_survived <- survival_rate("2nd", titanic_df)
third_survived <- survival_rate("3rd", titanic_df)
crew_survived <- survival_rate("Crew", titanic_df)
# What notable differences do you observe in the survival rates across classes?
# Note at least 2 observations.
# YOUR ANSWER HERE
# 1. The percentage of women and children survived mostly in 1st class, and this percentage
# drops all the way down to 3 percent in Crew class.
# 2. In all classes, the percentage of men survived > women and children
# What notable differences do you observe in the survival rates between the
# women and children versus the men in each group?
# Note at least 2 observations.
# YOUR ANSWER HERE
# 1. In crew members, almost all survived were men instead of women or children.
# 2. In all classes, percentage of women and children survived < men, most severely
# in Crew.
########################### Reading in Data (43 points)#########################
# In this section, you'll work with .csv data of life expectancy by country
# First, you should download a .csv file of Life Expectancy data from GapMinder:
# https://www.gapminder.org/data/
# You should save the .csv file into your `data` directory
# Before getting started, you should explore the GapMinder website to understand
# the *original* source of the data (e.g., who calculated these estimates)
# Place a brief summary of the each data source here (e.g., 1 - 2 sentences
# per data source)
# WRITE SUMMARY HERE
# LIKELY MULTIPLE LINES
# v7, by Mattias Lindgren: based on 100 sources compiled by Mattias Lindgren,
# making rough guesstimates showing in the charts as sudden dips in life expectancy.
# IHME: data for every five years (1970-2016) were found  in the Appendix Table
# 13A published with this Lancet article.
# UN: they used forecasts from World Population Prospects 2017 for data from 17-19.
# Using the `read.csv` function, read the life_expectancy_years.csv file into
# a variable called `life_exp`. Makes sure not to read strings as factors
life_exp <- read.csv("data/life_expectancy_years.csv")
# Write a function `get_col_mean()` that takes in a column name and a data frame
# and returns the mean of that column. Make sure to properly handle NA values
get_col_mean <- function(col_name, df) {
col <- df[!is.na(df[[col_name]]), col_name] #col_name as string
mean(col)
}
# Create a list `col_means` that has the mean value of each column in the
# data frame (except the `Country` column). You should use your function above.
col_names <- colnames(life_exp)
name_selector <- c(col_names[colnames(life_exp) != "country"])
col_means <- list()
for(name in name_selector) {
col_means[[name]] = get_col_mean(name, life_exp)
}
# Create a variable `avg_diff` that holds the difference in average country life
# expectancy between 1800 and 2018?
avg_diff <- col_means$X1800 - col_means$X2018
# Create a column `life_exp$change` that is the change
# in life expectancy from 2000 to 2018. Increases in life expectancy should
# be *positive*
life_exp$change <- life_exp$X2018 - life_exp$X2000
# Create a variable `most_improved` that is the *name* of the country
# with the largest gain in life expectancy
# Make sure to filter NA values!
countries <- life_exp[!is.na(life_exp$change),]
max <- max(countries$change)
most_improved <- countries[countries$change == max, "country"]
# Create a variable `num_small_gain` that has the *number* of countries
# whose life expectance has improved less than 1 year between 2000 and 2018
# Make sure to filter NA values!
num_small_gain <- countries[countries$change < 1, "country"]
# Write a function `country_change()` that takes in a country's name,
# two (numeric) years, and the `life_exp` dataframe as parameters.
# It should return the phrase:
# "Between YEAR1 and YEAR2, the life expectancy in COUNTRY went DIRECTION by
# SOME_YEARS years".
# Make sure to properly indictate the DIRECTION as "up" or "down"
country_change <- function(name, year_0, year_1, df) {
#difference:
diff <- df[df$country == name, paste0("X", year_1)] - df[df$country == name, paste0("X", year_0)]
#up or down:
str <- ""
if(diff < 0) {
str = "down"
} else {
str = "up"
}
#return sentence:
paste0("Between ", year_0, " and ", year_1,
", the life expectancy in ", name, " went ",
str, " by ", diff, " years."
)
}
# Using your `country_change()` function, create a variable `sweden_change`
# that is the change in life expectancy from 1960 to 1990 in Sweden
sweden_change <- country_change("Sweden", 1960, 1990, life_exp)
# Write a function `compare_change()` that takes in two country names and your
# `life_exp` data frame as parameters, and returns a sentence that describes
# their change in life expectancy from 2000 to 2018 (the `change` column)
# For example, if you passed the values "China", and "Bolivia" to you function,
# It would return this:
# "The country with the bigger change in life expectancy was China (gain=6.9),
#  whose life expectancy grew by 0.6 years more than Bolivia's (gain=6.3)."
# Make sure to round your numbers to one digit (though only after calculations!)
compare_change <- function(country1, country2, df) {
change1 <- df[df$country == country1, "change"]
change2 <- df[df$country == country2, "change"]
compare <- change1 - change2
bigger <- ""
bigger_change <- 0
if(compare != 0){
if(compare > 0) {
bigger <- country1
smaller <- country2
bigger_change <- change1
smaller_change <- change2
} else if(compare < 0) {
compare <- -compare
bigger <- country2
smaller <- country1
bigger_change <- change2
smaller_change <- change1
}
#round:
bigger_change <- round(bigger_change, digits = 1)
compare <- round(compare, digits = 1)
smaller_change <- round(smaller_change, digits = 1)
#return sentence:
paste0(
"The country with the bigger change in life expectancy was ",
bigger, "(gain=", bigger_change, "), whose life expectancy grew by ",
compare, " years more than ", smaller, "'s (gain=", smaller_change, ")."
)
} else {
#return sentence:
"Both countries have the same life expectancy."
}
}
# Using your `bigger_change()` function,(you mean compare_change() right????) create a
# variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
usa_or_france <- compare_change("United States", "France", life_exp)
# Write your `life_exp` data.frame to a new .csv file to your
# data/ directory with the filename `life_exp_with_change.csv`.
# Make sure not to write row names.
write.csv(life_exp, file = "data/life_exp_with_change.csv", row.names = FALSE)
setwd("~/Documents/au19-info201-leqiw2/test")
library(pscl)
install.packages(pscl)
setwd("~/Documents/au19-info201-leqiw2/a3-wang-leqi")
View(life_exp)
install.packages(pscl)
install.packages("pscl")
install.packages("dplyer")
install.packages("dplyr")
setwd("~/Documents/au19-info201-leqiw2/test")
pwd
library(pscl)
library(dplyr)
name_selector <- c(col_names(-1))
col_names <- colnames(life_exp)
name_selector <- c(col_names(-1))
name_selector <- c(col_names[-1]
View(name_selector)
View(name_selector)
col_names <- colnames(life_exp)
name_selector <- c(col_names[-1])
col_means <- list()
for(name in name_selector) {
col_means[[name]] = get_col_mean(name, life_exp)
}
# Using the `read.csv` function, read the life_expectancy_years.csv file into
# a variable called `life_exp`. Makes sure not to read strings as factors
life_exp <- read.csv("data/life_expectancy_years.csv")
setwd("~/Documents/au19-info201-leqiw2/a3-wang-leqi")
# Using the `read.csv` function, read the life_expectancy_years.csv file into
# a variable called `life_exp`. Makes sure not to read strings as factors
life_exp <- read.csv("data/life_expectancy_years.csv")
get_col_mean <- function(col_name, df) {
col <- df[!is.na(df[[col_name]]), col_name] #col_name as string
mean(col)
}
col_names <- colnames(life_exp)
name_selector <- c(col_names[-1])
col_means <- list()
for(name in name_selector) {
col_means[[name]] = get_col_mean(name, life_exp)
}
View(col_means)
###################### Data Frame Manipulation (24 POINTS) #####################
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
students <- paste("Students ", 1:1000)
# Create a vector `math_grades` that holds 1000 random values in it
# (these represent grades in a math course)
# These values should be normally distributed with a mean of 88 and a
# standard deviation of 10
math_grades <- c(1:1000)
math_grades <- rnorm(math_grades, mean = 88, sd = 10)
# Replace any values in the `math_grades vector` that are above 100 with
# the number 100
math_grades[math_grades > 100] <- 100
# Create a vector `spanish_grades` that holds 1000 random values in it
# (these represent grades in a spanish course)
# These values should be normally distributed with a mean of 85 and a
# standard deviation of 12
spanish_grades <- rnorm(c(1:1000), mean = 85, sd = 12)
# Replace any values in the `spanish_grades` that are above 100 with
# the number 100
spanish_grades[spanish_grades > 100] <- 100
# Create a data.frame variable `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(students, math_grades, spanish_grades, stringsAsFactors = FALSE)
# Create a variable `num_students` that contains the
# number of rows in your dataframe `grades`
num_students <- nrow(grades)
# Create a variable `num_courses` that contains the number of columns
# in your dataframe `grades` minus one (b/c of their names)
num_courses <- ncol(grades) - 1
# Add a new column `grade_diff` to your dataframe, which is equal to
# `students$math_grades` minus `students$spanish_grades`
grade_diff <- grades$math_grades - grades$spanish_grades
grades[,"grade_diff"] <- grade_diff
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that
# indicates that a student got a better grade in math
better_at_math <- (grade_diff > 0)
grades[,"better_at_math"] <- better_at_math
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- length(better_at_math[better_at_math == TRUE])
# Write your `grades` dataframe to a new .csv file inside your data/ directory
# with the filename `grades.csv`. Make sure *not* to write row names.
# (you'll need to create the `data/` directory, which you can do outside of R)
write.csv(grades, file = "data/grades.csv", row.names = FALSE)
setwd("~/Documents/au19-info201-leqiw2/test")
var <- c(1:100)
math_grades <- rnorm(1000, mean = 88, sd = 10)
num_better_at_math <- length(better_at_math == TRUE)
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- length(better_at_math[better_at_math == TRUE])
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- length(better_at_math[TRUE])
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- length(better_at_math[better_at_math == TRUE])
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- length(better_at_math[TRUE])
# Create a variable `num_better_at_math` that is the number
# (i.e., one numeric value) of students better at math
num_better_at_math <- length(better_at_math[better_at_math == TRUE])
setwd("~/Documents/au19-info201-leqiw2/test")
View(presidentialElections)
presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
View(presidentialElections)
View(presidentialElections %>% group_by(year))
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(pscl)
library(dplyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages(tidyr)
install.packages(tidyr)
install.packages("tidyr")
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages("tidyr")
library(tidyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
View(outcome)
View(presidentialElections)
View(nycflights13)
View(nycflights13)
library(tidyr)''
View("nycflights13")
View(nycflights13)
library(nycflights13)
install.packages(nycflights13)
install.packages("nycflights13")
View(nycflights13)
View(nycflights13 package)
library(nycflights13 package)
library(nycflights13)
View(nycflights13)
View("nycflights13")
View(nycflights13)
nycflights13
data(nycflights13)
data("nycflights13")
search(nycflights13 package )
search(nycflights13)
search("nycflights13")
library(nycflights13)
nycflights13
View(nycflights13)
library(nycflights13)
View(library(nycflights13))
View(nycfliths14)
View(nycfliths13)
View(nycflights13)
install.packages("nycflights13")
install.packages("nycflights13")
# install.packages("nycflights13")
library("nycflights13")
?flights
dim(flights)
View(flights)
